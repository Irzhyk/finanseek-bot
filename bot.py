import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters, CallbackQueryHandler,
    ConversationHandler
)
from datetime import datetime
import csv
import io
#ff
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    ADD_ACCOUNT_NAME, ADD_ACCOUNT_TYPE, ADD_ACCOUNT_CURRENCY, ADD_ACCOUNT_BALANCE,
    ADD_INCOME_AMOUNT, ADD_INCOME_CATEGORY, ADD_INCOME_ACCOUNT,
    ADD_EXPENSE_AMOUNT, ADD_EXPENSE_CATEGORY, ADD_EXPENSE_ACCOUNT
) = range(10)

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å—á—ë—Ç"), KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥")],
        [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")],
        [KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å")],
        [KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–ß–ï–¢–ê ===
async def start_add_account(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á—ë—Ç–∞:")
    return ADD_ACCOUNT_NAME

async def add_account_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['new_account'] = {'name': update.message.text}
    await update.message.reply_text("–í–≤–µ–¥–∏ —Ç–∏–ø —Å—á—ë—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –¥–µ–±–µ—Ç–æ–≤—ã–π, –≤–∫–ª–∞–¥, –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π):")
    return ADD_ACCOUNT_TYPE

async def add_account_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['new_account']['type'] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏ –≤–∞–ª—é—Ç—É —Å—á—ë—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: RUB, USD):")
    return ADD_ACCOUNT_CURRENCY

async def add_account_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['new_account']['currency'] = update.message.text.upper()
    await update.message.reply_text("–í–≤–µ–¥–∏ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:")
    return ADD_ACCOUNT_BALANCE

async def add_account_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        balance = float(update.message.text)
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        return ADD_ACCOUNT_BALANCE

    context.user_data['new_account']['balance'] = balance
    account = context.user_data['new_account']

    if 'accounts' not in context.user_data:
        context.user_data['accounts'] = []
    context.user_data['accounts'].append(account)

    await update.message.reply_text(f"–°—á—ë—Ç {account['name']} –¥–æ–±–∞–≤–ª–µ–Ω!")
    return ConversationHandler.END

# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –î–û–•–û–î–ê ===
async def start_add_income(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:")
    return ADD_INCOME_AMOUNT

async def add_income_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['new_income'] = {'amount': float(update.message.text)}
        await update.message.reply_text("–£–∫–∞–∂–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:")
        return ADD_INCOME_CATEGORY
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        return ADD_INCOME_AMOUNT

async def add_income_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['new_income']['category'] = update.message.text
    accounts = context.user_data.get('accounts', [])

    if not accounts:
        await update.message.reply_text("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å —Å—á—ë—Ç.")
        return ConversationHandler.END

    buttons = [[InlineKeyboardButton(f"{i+1}. {acc['name']} ({acc['type']})", callback_data=str(i))] for i, acc in enumerate(accounts)]
    reply_markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å—á—ë—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –∑–∞—á–∏—Å–ª–∏—Ç—å –¥–æ—Ö–æ–¥:", reply_markup=reply_markup)
    return ADD_INCOME_ACCOUNT

async def add_income_account(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    index = int(query.data)
    account = context.user_data['accounts'][index]
    income = context.user_data['new_income']

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–º–º—É –∫ –±–∞–ª–∞–Ω—Å—É
    account['balance'] += income['amount']

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
    if 'incomes' not in context.user_data:
        context.user_data['incomes'] = []
    context.user_data['incomes'].append({
        'amount': income['amount'],
        'category': income['category'],
        'account': account['name'],
        'date': datetime.now()
    })

    await query.edit_message_text(f"–î–æ—Ö–æ–¥ {income['amount']} {account['currency']} –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å—á—ë—Ç {account['name']}.")
    return ConversationHandler.END

# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –†–ê–°–•–û–î–ê ===
async def start_add_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
    return ADD_EXPENSE_AMOUNT

async def add_expense_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['new_expense'] = {'amount': float(update.message.text)}
        await update.message.reply_text("–£–∫–∞–∂–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:")
        return ADD_EXPENSE_CATEGORY
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        return ADD_EXPENSE_AMOUNT

async def add_expense_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['new_expense']['category'] = update.message.text
    accounts = context.user_data.get('accounts', [])

    if not accounts:
        await update.message.reply_text("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å —Å—á—ë—Ç.")
        return ConversationHandler.END

    buttons = [[InlineKeyboardButton(f"{i+1}. {acc['name']} ({acc['type']})", callback_data=str(i))] for i, acc in enumerate(accounts)]
    reply_markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å—á—ë—Ç, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥:", reply_markup=reply_markup)
    return ADD_EXPENSE_ACCOUNT

async def add_expense_account(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    index = int(query.data)
    account = context.user_data['accounts'][index]
    expense = context.user_data['new_expense']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
    if account['balance'] < expense['amount']:
        await query.edit_message_text(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á—ë—Ç–µ {account['name']}. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {account['balance']}")
        return ConversationHandler.END

    # –í—ã—á–∏—Ç–∞–µ–º —Å—É–º–º—É –∏–∑ –±–∞–ª–∞–Ω—Å–∞
    account['balance'] -= expense['amount']

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
    if 'expenses' not in context.user_data:
        context.user_data['expenses'] = []
    context.user_data['expenses'].append({
        'amount': expense['amount'],
        'category': expense['category'],
        'account': account['name'],
        'date': datetime.now()
    })

    await query.edit_message_text(f"–†–∞—Å—Ö–æ–¥ {expense['amount']} {account['currency']} —Å–ø–∏—Å–∞–Ω —Å–æ —Å—á—ë—Ç–∞ {account['name']}.")
    return ConversationHandler.END

# === –ü–û–ö–ê–ó–ê–¢–¨ –ë–ê–õ–ê–ù–° ===
async def show_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    accounts = context.user_data.get('accounts', [])
    if not accounts:
        await update.message.reply_text("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤.")
        return
    text = "–ë–∞–ª–∞–Ω—Å –ø–æ —Å—á–µ—Ç–∞–º:\n"
    for acc in accounts:
        text += f"{acc['name']} ({acc['type']}), –≤–∞–ª—é—Ç–∞ {acc['currency']}: {acc['balance']:.2f}\n"
    await update.message.reply_text(text)

# === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    incomes = context.user_data.get('incomes', [])
    expenses = context.user_data.get('expenses', [])

    if not incomes and not expenses:
        await update.message.reply_text("–î–∞–Ω–Ω—ã—Ö –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º –µ—â—ë –Ω–µ—Ç.")
        return

    def summarize(ops):
        summary = {}
        for op in ops:
            cat = op['category']
            summary[cat] = summary.get(cat, 0) + op['amount']
        return summary

    inc_sum = summarize(incomes)
    exp_sum = summarize(expenses)

    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤:\n"
    if inc_sum:
        for cat, val in inc_sum.items():
            text += f"- {cat}: {val:.2f}\n"
    else:
        text += "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    text += "\nüìâ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤:\n"
    if exp_sum:
        for cat, val in exp_sum.items():
            text += f"- {cat}: {val:.2f}\n"
    else:
        text += "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    await update.message.reply_text(text)

# === –°–û–•–†–ê–ù–ò–¢–¨ –°–¢–ê–¢–ò–°–¢–ò–ö–£ –í CSV ===
async def save_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    incomes = context.user_data.get('incomes', [])
    expenses = context.user_data.get('expenses', [])

    if not incomes and not expenses:
        await update.message.reply_text("–î–∞–Ω–Ω—ã—Ö –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º –µ—â—ë –Ω–µ—Ç.")
        return

    output = io.StringIO()
    writer = csv.writer(output)
    writer.writerow(['–¢–∏–ø', '–°—É–º–º–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–°—á—ë—Ç', '–î–∞—Ç–∞'])

    for op in incomes:
        writer.writerow(['–î–æ—Ö–æ–¥', f"{op['amount']:.2f}", op['category'], op['account'], op['date'].strftime("%Y-%m-%d %H:%M:%S")])
    for op in expenses:
        writer.writerow(['–†–∞—Å—Ö–æ–¥', f"{op['amount']:.2f}", op['category'], op['account'], op['date'].strftime("%Y-%m-%d %H:%M:%S")])

    output.seek(0)
    await update.message.reply_document(document=output, filename="statistics.csv")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–î–æ–±–∞–≤–∏—Ç—å —Å—á—ë—Ç":
        return await start_add_account(update, context)
    elif text == "–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥":
        return await start_add_income(update, context)
    elif text == "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥":
        return await start_add_expense(update, context)
    elif text == "–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å":
        await show_balance(update, context)
    elif text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await stats(update, context)
    elif text == "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É":
        await save_stats(update, context)
    else:
        await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.")

# === ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞
add_account_conv = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^–î–æ–±–∞–≤–∏—Ç—å —Å—á—ë—Ç$"), start_add_account)],
    states={
        ADD_ACCOUNT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_account_name)],
        ADD_ACCOUNT_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_account_type)],
        ADD_ACCOUNT_CURRENCY: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_account_currency)],
        ADD_ACCOUNT_BALANCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_account_balance)],
    },
    fallbacks=[],
)

# === ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞
add_income_conv = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥$"), start_add_income)],
    states={
        ADD_INCOME_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_income_amount)],
        ADD_INCOME_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_income_category)],
        ADD_INCOME_ACCOUNT: [CallbackQueryHandler(add_income_account)],
    },
    fallbacks=[],
)

# === ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
add_expense_conv = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥$"), start_add_expense)],
    states={
        ADD_EXPENSE_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_expense_amount)],
        ADD_EXPENSE_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_expense_category)],
        ADD_EXPENSE_ACCOUNT: [CallbackQueryHandler(add_expense_account)],
    },
    fallbacks=[],
)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
def main():
    app = ApplicationBuilder().token("7825702092:AAGKyGr_oY9dgtoimkGvc0UDd11Nz5Mx7iM").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(add_account_conv)
    app.add_handler(add_income_conv)
    app.add_handler(add_expense_conv)
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("save_stats", save_stats))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    app.run_polling()

if __name__ == '__main__':
    main()
